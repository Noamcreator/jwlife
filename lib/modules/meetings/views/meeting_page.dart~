import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:http/http.dart' as http;
import 'package:html/parser.dart' as html_parser;
import 'package:jwlife/core/icons.dart';
import 'package:jwlife/core/utils/files_helper.dart';
import 'package:sqflite/sqflite.dart';

import '../../../app/jwlife_app.dart';
import 'life_and_ministry_page.dart';

class MeetingsView extends StatefulWidget {
  const MeetingsView({Key? key}) : super(key: key);

  @override
  _MeetingsViewState createState() => _MeetingsViewState();
}

class _MeetingsViewState extends State<MeetingsView> {
  String? docLaM;
  int? docIdLaM;
  String? docWatchtower;
  int? docIdWatchtower;
  Map<String, dynamic>? regional_convention_pub;
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    //fetchMeetingsOfTheWeek();
    //fetchRegionalConvention();

    setState(() {
      isLoading = false;
    });
  }

  Future<void> fetchMeetingsOfTheWeek() async {
    String languageSymbol = JwLifeApp.currentLanguage.symbol;
    try {
      final response = await http.get(Uri.parse('https://wol.jw.org/wol/finder?wtlocale=$languageSymbol&alias=meetings&date=${DateFormat('yyyy-MM-dd').format(DateTime.now().add(Duration(days: 1)))}'));

      if (response.statusCode == 200) {
        var htmlPage = html_parser.parse(response.body);

        var linkCard = htmlPage.querySelector('.linkCard')?.querySelector('a');
        if (linkCard != null && linkCard.attributes['href'] != null) {
          final uri = Uri.parse(linkCard.attributes['href']!);
          final pathSegments = uri.pathSegments;
          final newPath = pathSegments.skip(1).join('/');

          final response1 = await http.get(Uri.parse('https://wol.jw.org/' + newPath));

          if (response1.statusCode == 200) {
            final jsonResponse1 = json.decode(response1.body);
            setState(() {
              docLaM = jsonResponse1['content'];
              docIdLaM = int.parse(newPath.split('/').last);
            });
          }
        }

        var linkWt = htmlPage.querySelector('.itemData .groupTOC')?.querySelector('a')?.attributes['href'];
        if (linkWt != null) {
          final uri2 = Uri.parse(linkWt);
          final pathSegments2 = uri2.pathSegments;
          final newPath2 = pathSegments2.skip(1).join('/');
          final response2 = await http.get(Uri.parse('https://wol.jw.org/' + newPath2));

          if (response2.statusCode == 200) {
            final jsonResponse2 = json.decode(response2.body);
            setState(() {
              docWatchtower = jsonResponse2['items'][0]['content'];
              docIdWatchtower = jsonResponse2['items'][0]['did'];
            });
          }
        }
      } else {
        throw Exception('Failed to load publication');
      }
    } catch (e) {
      print('Error: $e');
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  int getWeekOfYear(DateTime date) {
    final firstDayOfYear = DateTime(date.year, 1, 1);
    final daysPassed = date.difference(firstDayOfYear).inDays;
    return (daysPassed / 7).ceil();
  }

  String formatWeekRange(DateTime date) {
    // Trouver le premier jour de la semaine (lundi)
    DateTime firstDayOfWeek = date.subtract(Duration(days: date.weekday - 1));
    // Trouver le dernier jour de la semaine (dimanche)
    DateTime lastDayOfWeek = firstDayOfWeek.add(const Duration(days: 6));

    // Formater les jours et le mois
    String dayStart = DateFormat('d').format(firstDayOfWeek);
    String dayEnd = DateFormat('d').format(lastDayOfWeek);
    String month = DateFormat('MMMM', 'fr_FR').format(date); // Formatage du mois en français

    return '$dayStart-$dayEnd $month';
  }

  Future<void> fetchRegionalConvention() async {
    int mepsLanguageId = JwLifeApp.currentLanguage.id;

    File catalogosFile = await getCatalogFile();
    File mepsFile = await getMepsFile();

    if (await catalogosFile.exists()) {
      Database catalogDatabase = await openDatabase(catalogosFile.path);

      await catalogDatabase.execute("ATTACH DATABASE ? AS meps", [mepsFile.path]);

      // Changez le type de result ici
      List<Map<String, dynamic>> resultList = await catalogDatabase.rawQuery(''' 
        SELECT DISTINCT
          p.Id AS PublicationId,
          p.KeySymbol,
          p.Symbol,
          p.IssueTagNumber,
          p.Title,
          p.IssueTitle,
          p.ShortTitle,
          p.CoverTitle,
          pam.PublicationAttributeId,
          p.MepsLanguageId,
          meps.Language.Symbol AS LanguageSymbol,
          (SELECT ia.NameFragment
          FROM ImageAsset ia
          JOIN PublicationAssetImageMap paim ON ia.Id = paim.ImageAssetId
          WHERE paim.PublicationAssetId = pa.Id AND ia.NameFragment LIKE '%_sqr-%'
          ORDER BY ia.Width DESC
          LIMIT 1) AS ImageSqr,
          (SELECT ia.NameFragment
          FROM ImageAsset ia
          JOIN PublicationAssetImageMap paim ON ia.Id = paim.ImageAssetId
          WHERE paim.PublicationAssetId = pa.Id AND ia.NameFragment LIKE '%_lsr-%'
          ORDER BY ia.Width DESC
          LIMIT 1) AS ImageLsr
        FROM 
          Publication p
        LEFT JOIN
          PublicationAsset pa ON p.Id = pa.PublicationId
        LEFT JOIN
          PublicationRootKey prk ON p.PublicationRootKeyId = prk.Id
        LEFT JOIN
          PublicationAssetImageMap paim ON pa.Id = paim.PublicationAssetId
        LEFT JOIN
          ImageAsset ia ON paim.ImageAssetId = ia.Id
        LEFT JOIN
          PublicationAttributeMap pam ON pa.PublicationId = pam.PublicationId
        LEFT JOIN
          meps.Language ON p.MepsLanguageId = meps.Language.LanguageId
        WHERE 
          p.MepsLanguageId = ? AND p.KeySymbol LIKE '%CO-pgm%'
        ORDER BY p.Year DESC
        LIMIT 1
        ''', [mepsLanguageId]);

      await catalogDatabase.execute("DETACH DATABASE meps");
      await catalogDatabase.close();

      setState(() {
        // Vérifiez si le résultat n'est pas vide avant d'accéder au premier élément
        regional_convention_pub = resultList.isNotEmpty ? resultList[0] : {};
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        appBar: AppBar(
          title: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Réunions et Assemblées',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              Text(
                formatWeekRange(DateTime.now()),
                style: const TextStyle(fontSize: 14, color: Colors.grey),
              ),
            ],
          ),
          actions: [
            IconButton(
              icon: const Icon(JwIcons.magnifying_glass),
              onPressed: () {},
            ),
            IconButton(
              icon: const Icon(JwIcons.language),
              onPressed: () {},
            ),
            IconButton(
              icon: const Icon(Icons.more_vert),
              onPressed: () {},
            ),
          ],
        ),
        body: isLoading
            ? const Center(child: CircularProgressIndicator())
            : Column(
          children: [
            const TabBar(
              isScrollable: true,
              tabs: <Widget>[
                Tab(text: 'VIE ET MINISTÈRE'),
                Tab(text: 'ÉTUDE DE LA TOUR DE GARDE'),
                Tab(text: 'ASSEMBLÉE DE CIRCONSCRIPTION'),
                Tab(text: 'ASSEMBLÉE RÉGIONALE'),
              ],
            ),
            Expanded(
              child: TabBarView(
                children: <Widget>[
                  const Center(child: Text("Pas de contenu pour Vie et Ministère")),
                  const Center(child: Text("Pas de contenu pour La Tour de Garde")),
                  const Center(child: Text('Assemblé de circonscription')),
                  const Center(child: Text("Pas de contenu pour l'Assemblée régionale")),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
